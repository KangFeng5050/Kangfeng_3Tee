// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace header {

namespace {

const ::google::protobuf::Descriptor* signal_header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  signal_header_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* signal_group_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* signal_cmd_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_header_2eproto() {
  protobuf_AddDesc_header_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "header.proto");
  GOOGLE_CHECK(file != NULL);
  signal_header_descriptor_ = file->message_type(0);
  static const int signal_header_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal_header, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal_header, group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal_header, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal_header, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal_header, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal_header, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal_header, content_),
  };
  signal_header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      signal_header_descriptor_,
      signal_header::default_instance_,
      signal_header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal_header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal_header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(signal_header));
  signal_group_type_descriptor_ = file->enum_type(0);
  signal_cmd_type_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_header_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    signal_header_descriptor_, &signal_header::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_header_2eproto() {
  delete signal_header::default_instance_;
  delete signal_header_reflection_;
}

void protobuf_AddDesc_header_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014header.proto\022\006header\"\270\001\n\rsignal_header"
    "\022\017\n\007version\030\001 \002(\t\022-\n\ngroup_type\030\002 \002(\0162\031."
    "header.signal_group_type\022)\n\010cmd_type\030\003 \002"
    "(\0162\027.header.signal_cmd_type\022\021\n\ttimestamp"
    "\030\004 \002(\r\022\014\n\004from\030\005 \002(\t\022\n\n\002to\030\006 \002(\t\022\017\n\007cont"
    "ent\030\007 \002(\014*\326\001\n\021signal_group_type\022\032\n\026SIGNA"
    "LE_GROUP_TYPE_SYS\020\000\022\036\n\032SIGNALE_GROUP_TYP"
    "E_MESSAGE\020\001\022\035\n\031SIGNALE_GROUP_TYPE_INVITE"
    "\020\003\022\032\n\026SIGNALE_GROUP_TYPE_RPC\020\004\022#\n\037SIGNAL"
    "E_GROUP_TYPE_ADDRESS_BOOK\020\005\022%\n!SIGNALE_G"
    "ROUP_TYPE_REMOTE_CONTROL\020\006*\332\004\n\017signal_cm"
    "d_type\022\033\n\027SIGNALE_CMD_TYPE_INVITE\020\000\022\"\n\036S"
    "IGNALE_CMD_TYPE_INVITE_CANCEL\020\001\022#\n\037SIGNA"
    "LE_CMD_TYPE_INVITE_RINGING\020\002\022\036\n\032SIGNALE_"
    "CMD_TYPE_INVITE_OK\020\003\022\"\n\036SIGNALE_CMD_TYPE"
    "_INVITE_REJECT\020\004\022#\n\037SIGNALE_CMD_TYPE_INV"
    "ITE_TIMEOUT\020\005\022\037\n\033SIGNALE_CMD_TYPE_INVITE"
    "_BYE\020\006\022$\n SIGNALE_CMD_TYPE_RC_MOUSE_EVEN"
    "TS\020 \022\'\n#SIGNALE_CMD_TYPE_RC_KEYBOARD_EVE"
    "NTS\020!\022!\n\035SIGNALE_CMD_TYPE_MESSAGE_DATA\0200"
    "\022%\n!SIGNALE_CMD_TYPE_MESSAGE_RECEIVED\0201\022"
    "!\n\035SIGNALE_CMD_TYPE_MESSAGE_READ\0202\022%\n!SI"
    "GNALE_CMD_TYPE_MESSAGE_RECALLED\0203\022%\n!SIG"
    "NALE_CMD_TYPE_RPC_CALL_REQUEST\020@\022&\n\"SIGN"
    "ALE_CMD_TYPE_RPC_CALL_RESPONSE\020A\022%\n!SIGN"
    "ALE_CMD_TYPE_RPC_NOTIFICATION\020BB\014Z\nsigna"
    "l_pdu", 1045);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "header.proto", &protobuf_RegisterTypes);
  signal_header::default_instance_ = new signal_header();
  signal_header::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_header_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_header_2eproto {
  StaticDescriptorInitializer_header_2eproto() {
    protobuf_AddDesc_header_2eproto();
  }
} static_descriptor_initializer_header_2eproto_;
const ::google::protobuf::EnumDescriptor* signal_group_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return signal_group_type_descriptor_;
}
bool signal_group_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* signal_cmd_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return signal_cmd_type_descriptor_;
}
bool signal_cmd_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 32:
    case 33:
    case 48:
    case 49:
    case 50:
    case 51:
    case 64:
    case 65:
    case 66:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int signal_header::kVersionFieldNumber;
const int signal_header::kGroupTypeFieldNumber;
const int signal_header::kCmdTypeFieldNumber;
const int signal_header::kTimestampFieldNumber;
const int signal_header::kFromFieldNumber;
const int signal_header::kToFieldNumber;
const int signal_header::kContentFieldNumber;
#endif  // !_MSC_VER

signal_header::signal_header()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:header.signal_header)
}

void signal_header::InitAsDefaultInstance() {
}

signal_header::signal_header(const signal_header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:header.signal_header)
}

void signal_header::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_type_ = 0;
  cmd_type_ = 0;
  timestamp_ = 0u;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

signal_header::~signal_header() {
  // @@protoc_insertion_point(destructor:header.signal_header)
  SharedDtor();
}

void signal_header::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void signal_header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* signal_header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return signal_header_descriptor_;
}

const signal_header& signal_header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_header_2eproto();
  return *default_instance_;
}

signal_header* signal_header::default_instance_ = NULL;

signal_header* signal_header::New() const {
  return new signal_header;
}

void signal_header::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<signal_header*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(group_type_, cmd_type_);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    timestamp_ = 0u;
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool signal_header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:header.signal_header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_type;
        break;
      }

      // required .header.signal_group_type group_type = 2;
      case 2: {
        if (tag == 16) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::header::signal_group_type_IsValid(value)) {
            set_group_type(static_cast< ::header::signal_group_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cmd_type;
        break;
      }

      // required .header.signal_cmd_type cmd_type = 3;
      case 3: {
        if (tag == 24) {
         parse_cmd_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::header::signal_cmd_type_IsValid(value)) {
            set_cmd_type(static_cast< ::header::signal_cmd_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // required uint32 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_from;
        break;
      }

      // required string from = 5;
      case 5: {
        if (tag == 42) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_to;
        break;
      }

      // required string to = 6;
      case 6: {
        if (tag == 50) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "to");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // required bytes content = 7;
      case 7: {
        if (tag == 58) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:header.signal_header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:header.signal_header)
  return false;
#undef DO_
}

void signal_header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:header.signal_header)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // required .header.signal_group_type group_type = 2;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->group_type(), output);
  }

  // required .header.signal_cmd_type cmd_type = 3;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cmd_type(), output);
  }

  // required uint32 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  // required string from = 5;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->from(), output);
  }

  // required string to = 6;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->to(), output);
  }

  // required bytes content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:header.signal_header)
}

::google::protobuf::uint8* signal_header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:header.signal_header)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // required .header.signal_group_type group_type = 2;
  if (has_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->group_type(), target);
  }

  // required .header.signal_cmd_type cmd_type = 3;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cmd_type(), target);
  }

  // required uint32 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  // required string from = 5;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->from(), target);
  }

  // required string to = 6;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->to(), target);
  }

  // required bytes content = 7;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:header.signal_header)
  return target;
}

int signal_header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required .header.signal_group_type group_type = 2;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required .header.signal_cmd_type cmd_type = 3;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // required uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // required string from = 5;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // required string to = 6;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

    // required bytes content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void signal_header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const signal_header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const signal_header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void signal_header::MergeFrom(const signal_header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void signal_header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signal_header::CopyFrom(const signal_header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signal_header::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void signal_header::Swap(signal_header* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(group_type_, other->group_type_);
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata signal_header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = signal_header_descriptor_;
  metadata.reflection = signal_header_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace header

// @@protoc_insertion_point(global_scope)
