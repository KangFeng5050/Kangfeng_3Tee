// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signal_invite.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "signal_invite.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace signal_invite {

namespace {

const ::google::protobuf::Descriptor* Invite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Invite_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteCancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteCancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteReject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteReject_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteRinging_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteRinging_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteTimeOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteTimeOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteBye_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteBye_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_signal_5finvite_2eproto() {
  protobuf_AddDesc_signal_5finvite_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "signal_invite.proto");
  GOOGLE_CHECK(file != NULL);
  Invite_descriptor_ = file->message_type(0);
  static const int Invite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invite, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invite, options_),
  };
  Invite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Invite_descriptor_,
      Invite::default_instance_,
      Invite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Invite));
  InviteCancel_descriptor_ = file->message_type(1);
  static const int InviteCancel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCancel, id_),
  };
  InviteCancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteCancel_descriptor_,
      InviteCancel::default_instance_,
      InviteCancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteCancel));
  InviteOk_descriptor_ = file->message_type(2);
  static const int InviteOk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteOk, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteOk, options_),
  };
  InviteOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteOk_descriptor_,
      InviteOk::default_instance_,
      InviteOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteOk));
  InviteReject_descriptor_ = file->message_type(3);
  static const int InviteReject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteReject, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteReject, reson_),
  };
  InviteReject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteReject_descriptor_,
      InviteReject::default_instance_,
      InviteReject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteReject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteReject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteReject));
  InviteRinging_descriptor_ = file->message_type(4);
  static const int InviteRinging_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteRinging, id_),
  };
  InviteRinging_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteRinging_descriptor_,
      InviteRinging::default_instance_,
      InviteRinging_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteRinging, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteRinging, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteRinging));
  InviteTimeOut_descriptor_ = file->message_type(5);
  static const int InviteTimeOut_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTimeOut, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTimeOut, reson_),
  };
  InviteTimeOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteTimeOut_descriptor_,
      InviteTimeOut::default_instance_,
      InviteTimeOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTimeOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTimeOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteTimeOut));
  InviteBye_descriptor_ = file->message_type(6);
  static const int InviteBye_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteBye, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteBye, reson_),
  };
  InviteBye_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteBye_descriptor_,
      InviteBye::default_instance_,
      InviteBye_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteBye, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteBye, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteBye));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_signal_5finvite_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Invite_descriptor_, &Invite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteCancel_descriptor_, &InviteCancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteOk_descriptor_, &InviteOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteReject_descriptor_, &InviteReject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteRinging_descriptor_, &InviteRinging::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteTimeOut_descriptor_, &InviteTimeOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteBye_descriptor_, &InviteBye::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_signal_5finvite_2eproto() {
  delete Invite::default_instance_;
  delete Invite_reflection_;
  delete InviteCancel::default_instance_;
  delete InviteCancel_reflection_;
  delete InviteOk::default_instance_;
  delete InviteOk_reflection_;
  delete InviteReject::default_instance_;
  delete InviteReject_reflection_;
  delete InviteRinging::default_instance_;
  delete InviteRinging_reflection_;
  delete InviteTimeOut::default_instance_;
  delete InviteTimeOut_reflection_;
  delete InviteBye::default_instance_;
  delete InviteBye_reflection_;
}

void protobuf_AddDesc_signal_5finvite_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023signal_invite.proto\022\rsignal_invite\"%\n\006"
    "Invite\022\n\n\002id\030\001 \002(\005\022\017\n\007options\030\002 \001(\t\"\032\n\014I"
    "nviteCancel\022\n\n\002id\030\001 \002(\005\"\'\n\010InviteOk\022\n\n\002i"
    "d\030\001 \002(\005\022\017\n\007options\030\002 \001(\t\")\n\014InviteReject"
    "\022\n\n\002id\030\001 \002(\005\022\r\n\005reson\030\002 \001(\t\"\033\n\rInviteRin"
    "ging\022\n\n\002id\030\001 \002(\005\"*\n\rInviteTimeOut\022\n\n\002id\030"
    "\001 \002(\005\022\r\n\005reson\030\002 \001(\t\"&\n\tInviteBye\022\n\n\002id\030"
    "\001 \002(\005\022\r\n\005reson\030\002 \001(\tB\014Z\nsignal_pdu", 314);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "signal_invite.proto", &protobuf_RegisterTypes);
  Invite::default_instance_ = new Invite();
  InviteCancel::default_instance_ = new InviteCancel();
  InviteOk::default_instance_ = new InviteOk();
  InviteReject::default_instance_ = new InviteReject();
  InviteRinging::default_instance_ = new InviteRinging();
  InviteTimeOut::default_instance_ = new InviteTimeOut();
  InviteBye::default_instance_ = new InviteBye();
  Invite::default_instance_->InitAsDefaultInstance();
  InviteCancel::default_instance_->InitAsDefaultInstance();
  InviteOk::default_instance_->InitAsDefaultInstance();
  InviteReject::default_instance_->InitAsDefaultInstance();
  InviteRinging::default_instance_->InitAsDefaultInstance();
  InviteTimeOut::default_instance_->InitAsDefaultInstance();
  InviteBye::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_signal_5finvite_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_signal_5finvite_2eproto {
  StaticDescriptorInitializer_signal_5finvite_2eproto() {
    protobuf_AddDesc_signal_5finvite_2eproto();
  }
} static_descriptor_initializer_signal_5finvite_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Invite::kIdFieldNumber;
const int Invite::kOptionsFieldNumber;
#endif  // !_MSC_VER

Invite::Invite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_invite.Invite)
}

void Invite::InitAsDefaultInstance() {
}

Invite::Invite(const Invite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:signal_invite.Invite)
}

void Invite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invite::~Invite() {
  // @@protoc_insertion_point(destructor:signal_invite.Invite)
  SharedDtor();
}

void Invite::SharedDtor() {
  if (options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete options_;
  }
  if (this != default_instance_) {
  }
}

void Invite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Invite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Invite_descriptor_;
}

const Invite& Invite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_signal_5finvite_2eproto();
  return *default_instance_;
}

Invite* Invite::default_instance_ = NULL;

Invite* Invite::New() const {
  return new Invite;
}

void Invite::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_options()) {
      if (options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        options_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Invite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:signal_invite.Invite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional string options = 2;
      case 2: {
        if (tag == 18) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->options().data(), this->options().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "options");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:signal_invite.Invite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:signal_invite.Invite)
  return false;
#undef DO_
}

void Invite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:signal_invite.Invite)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->options().data(), this->options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "options");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:signal_invite.Invite)
}

::google::protobuf::uint8* Invite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_invite.Invite)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->options().data(), this->options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "options");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_invite.Invite)
  return target;
}

int Invite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Invite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Invite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Invite::MergeFrom(const Invite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_options()) {
      set_options(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Invite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invite::CopyFrom(const Invite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Invite::Swap(Invite* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Invite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Invite_descriptor_;
  metadata.reflection = Invite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteCancel::kIdFieldNumber;
#endif  // !_MSC_VER

InviteCancel::InviteCancel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_invite.InviteCancel)
}

void InviteCancel::InitAsDefaultInstance() {
}

InviteCancel::InviteCancel(const InviteCancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:signal_invite.InviteCancel)
}

void InviteCancel::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteCancel::~InviteCancel() {
  // @@protoc_insertion_point(destructor:signal_invite.InviteCancel)
  SharedDtor();
}

void InviteCancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteCancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteCancel_descriptor_;
}

const InviteCancel& InviteCancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_signal_5finvite_2eproto();
  return *default_instance_;
}

InviteCancel* InviteCancel::default_instance_ = NULL;

InviteCancel* InviteCancel::New() const {
  return new InviteCancel;
}

void InviteCancel::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:signal_invite.InviteCancel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:signal_invite.InviteCancel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:signal_invite.InviteCancel)
  return false;
#undef DO_
}

void InviteCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:signal_invite.InviteCancel)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:signal_invite.InviteCancel)
}

::google::protobuf::uint8* InviteCancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_invite.InviteCancel)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_invite.InviteCancel)
  return target;
}

int InviteCancel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteCancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteCancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteCancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteCancel::MergeFrom(const InviteCancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteCancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteCancel::CopyFrom(const InviteCancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteCancel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteCancel::Swap(InviteCancel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteCancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteCancel_descriptor_;
  metadata.reflection = InviteCancel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteOk::kIdFieldNumber;
const int InviteOk::kOptionsFieldNumber;
#endif  // !_MSC_VER

InviteOk::InviteOk()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_invite.InviteOk)
}

void InviteOk::InitAsDefaultInstance() {
}

InviteOk::InviteOk(const InviteOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:signal_invite.InviteOk)
}

void InviteOk::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteOk::~InviteOk() {
  // @@protoc_insertion_point(destructor:signal_invite.InviteOk)
  SharedDtor();
}

void InviteOk::SharedDtor() {
  if (options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete options_;
  }
  if (this != default_instance_) {
  }
}

void InviteOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteOk_descriptor_;
}

const InviteOk& InviteOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_signal_5finvite_2eproto();
  return *default_instance_;
}

InviteOk* InviteOk::default_instance_ = NULL;

InviteOk* InviteOk::New() const {
  return new InviteOk;
}

void InviteOk::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_options()) {
      if (options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        options_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:signal_invite.InviteOk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional string options = 2;
      case 2: {
        if (tag == 18) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->options().data(), this->options().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "options");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:signal_invite.InviteOk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:signal_invite.InviteOk)
  return false;
#undef DO_
}

void InviteOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:signal_invite.InviteOk)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->options().data(), this->options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "options");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:signal_invite.InviteOk)
}

::google::protobuf::uint8* InviteOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_invite.InviteOk)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->options().data(), this->options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "options");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_invite.InviteOk)
  return target;
}

int InviteOk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteOk::MergeFrom(const InviteOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_options()) {
      set_options(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteOk::CopyFrom(const InviteOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteOk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteOk::Swap(InviteOk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteOk_descriptor_;
  metadata.reflection = InviteOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteReject::kIdFieldNumber;
const int InviteReject::kResonFieldNumber;
#endif  // !_MSC_VER

InviteReject::InviteReject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_invite.InviteReject)
}

void InviteReject::InitAsDefaultInstance() {
}

InviteReject::InviteReject(const InviteReject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:signal_invite.InviteReject)
}

void InviteReject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  reson_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteReject::~InviteReject() {
  // @@protoc_insertion_point(destructor:signal_invite.InviteReject)
  SharedDtor();
}

void InviteReject::SharedDtor() {
  if (reson_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reson_;
  }
  if (this != default_instance_) {
  }
}

void InviteReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteReject_descriptor_;
}

const InviteReject& InviteReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_signal_5finvite_2eproto();
  return *default_instance_;
}

InviteReject* InviteReject::default_instance_ = NULL;

InviteReject* InviteReject::New() const {
  return new InviteReject;
}

void InviteReject::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_reson()) {
      if (reson_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reson_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:signal_invite.InviteReject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reson;
        break;
      }

      // optional string reson = 2;
      case 2: {
        if (tag == 18) {
         parse_reson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reson()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reson().data(), this->reson().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reson");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:signal_invite.InviteReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:signal_invite.InviteReject)
  return false;
#undef DO_
}

void InviteReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:signal_invite.InviteReject)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string reson = 2;
  if (has_reson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reson().data(), this->reson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reson");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reson(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:signal_invite.InviteReject)
}

::google::protobuf::uint8* InviteReject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_invite.InviteReject)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string reson = 2;
  if (has_reson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reson().data(), this->reson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reson");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reson(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_invite.InviteReject)
  return target;
}

int InviteReject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string reson = 2;
    if (has_reson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reson());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteReject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteReject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteReject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteReject::MergeFrom(const InviteReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reson()) {
      set_reson(from.reson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteReject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteReject::CopyFrom(const InviteReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteReject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteReject::Swap(InviteReject* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reson_, other->reson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteReject_descriptor_;
  metadata.reflection = InviteReject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteRinging::kIdFieldNumber;
#endif  // !_MSC_VER

InviteRinging::InviteRinging()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_invite.InviteRinging)
}

void InviteRinging::InitAsDefaultInstance() {
}

InviteRinging::InviteRinging(const InviteRinging& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:signal_invite.InviteRinging)
}

void InviteRinging::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteRinging::~InviteRinging() {
  // @@protoc_insertion_point(destructor:signal_invite.InviteRinging)
  SharedDtor();
}

void InviteRinging::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteRinging::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteRinging::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteRinging_descriptor_;
}

const InviteRinging& InviteRinging::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_signal_5finvite_2eproto();
  return *default_instance_;
}

InviteRinging* InviteRinging::default_instance_ = NULL;

InviteRinging* InviteRinging::New() const {
  return new InviteRinging;
}

void InviteRinging::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteRinging::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:signal_invite.InviteRinging)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:signal_invite.InviteRinging)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:signal_invite.InviteRinging)
  return false;
#undef DO_
}

void InviteRinging::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:signal_invite.InviteRinging)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:signal_invite.InviteRinging)
}

::google::protobuf::uint8* InviteRinging::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_invite.InviteRinging)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_invite.InviteRinging)
  return target;
}

int InviteRinging::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteRinging::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteRinging* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteRinging*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteRinging::MergeFrom(const InviteRinging& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteRinging::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteRinging::CopyFrom(const InviteRinging& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteRinging::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteRinging::Swap(InviteRinging* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteRinging::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteRinging_descriptor_;
  metadata.reflection = InviteRinging_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteTimeOut::kIdFieldNumber;
const int InviteTimeOut::kResonFieldNumber;
#endif  // !_MSC_VER

InviteTimeOut::InviteTimeOut()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_invite.InviteTimeOut)
}

void InviteTimeOut::InitAsDefaultInstance() {
}

InviteTimeOut::InviteTimeOut(const InviteTimeOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:signal_invite.InviteTimeOut)
}

void InviteTimeOut::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  reson_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteTimeOut::~InviteTimeOut() {
  // @@protoc_insertion_point(destructor:signal_invite.InviteTimeOut)
  SharedDtor();
}

void InviteTimeOut::SharedDtor() {
  if (reson_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reson_;
  }
  if (this != default_instance_) {
  }
}

void InviteTimeOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteTimeOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteTimeOut_descriptor_;
}

const InviteTimeOut& InviteTimeOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_signal_5finvite_2eproto();
  return *default_instance_;
}

InviteTimeOut* InviteTimeOut::default_instance_ = NULL;

InviteTimeOut* InviteTimeOut::New() const {
  return new InviteTimeOut;
}

void InviteTimeOut::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_reson()) {
      if (reson_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reson_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteTimeOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:signal_invite.InviteTimeOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reson;
        break;
      }

      // optional string reson = 2;
      case 2: {
        if (tag == 18) {
         parse_reson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reson()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reson().data(), this->reson().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reson");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:signal_invite.InviteTimeOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:signal_invite.InviteTimeOut)
  return false;
#undef DO_
}

void InviteTimeOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:signal_invite.InviteTimeOut)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string reson = 2;
  if (has_reson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reson().data(), this->reson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reson");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reson(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:signal_invite.InviteTimeOut)
}

::google::protobuf::uint8* InviteTimeOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_invite.InviteTimeOut)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string reson = 2;
  if (has_reson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reson().data(), this->reson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reson");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reson(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_invite.InviteTimeOut)
  return target;
}

int InviteTimeOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string reson = 2;
    if (has_reson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reson());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteTimeOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteTimeOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteTimeOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteTimeOut::MergeFrom(const InviteTimeOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reson()) {
      set_reson(from.reson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteTimeOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteTimeOut::CopyFrom(const InviteTimeOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteTimeOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteTimeOut::Swap(InviteTimeOut* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reson_, other->reson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteTimeOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteTimeOut_descriptor_;
  metadata.reflection = InviteTimeOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteBye::kIdFieldNumber;
const int InviteBye::kResonFieldNumber;
#endif  // !_MSC_VER

InviteBye::InviteBye()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_invite.InviteBye)
}

void InviteBye::InitAsDefaultInstance() {
}

InviteBye::InviteBye(const InviteBye& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:signal_invite.InviteBye)
}

void InviteBye::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  reson_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteBye::~InviteBye() {
  // @@protoc_insertion_point(destructor:signal_invite.InviteBye)
  SharedDtor();
}

void InviteBye::SharedDtor() {
  if (reson_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reson_;
  }
  if (this != default_instance_) {
  }
}

void InviteBye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteBye::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteBye_descriptor_;
}

const InviteBye& InviteBye::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_signal_5finvite_2eproto();
  return *default_instance_;
}

InviteBye* InviteBye::default_instance_ = NULL;

InviteBye* InviteBye::New() const {
  return new InviteBye;
}

void InviteBye::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_reson()) {
      if (reson_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reson_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteBye::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:signal_invite.InviteBye)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reson;
        break;
      }

      // optional string reson = 2;
      case 2: {
        if (tag == 18) {
         parse_reson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reson()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reson().data(), this->reson().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reson");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:signal_invite.InviteBye)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:signal_invite.InviteBye)
  return false;
#undef DO_
}

void InviteBye::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:signal_invite.InviteBye)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string reson = 2;
  if (has_reson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reson().data(), this->reson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reson");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reson(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:signal_invite.InviteBye)
}

::google::protobuf::uint8* InviteBye::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_invite.InviteBye)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string reson = 2;
  if (has_reson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reson().data(), this->reson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reson");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reson(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_invite.InviteBye)
  return target;
}

int InviteBye::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string reson = 2;
    if (has_reson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reson());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteBye::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteBye* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteBye*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteBye::MergeFrom(const InviteBye& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reson()) {
      set_reson(from.reson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteBye::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteBye::CopyFrom(const InviteBye& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteBye::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteBye::Swap(InviteBye* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reson_, other->reson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteBye::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteBye_descriptor_;
  metadata.reflection = InviteBye_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace signal_invite

// @@protoc_insertion_point(global_scope)
