// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signal_invite.proto

#ifndef PROTOBUF_signal_5finvite_2eproto__INCLUDED
#define PROTOBUF_signal_5finvite_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace signal_invite {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_signal_5finvite_2eproto();
void protobuf_AssignDesc_signal_5finvite_2eproto();
void protobuf_ShutdownFile_signal_5finvite_2eproto();

class Invite;
class InviteCancel;
class InviteOk;
class InviteReject;
class InviteRinging;
class InviteTimeOut;
class InviteBye;

// ===================================================================

class Invite : public ::google::protobuf::Message {
 public:
  Invite();
  virtual ~Invite();

  Invite(const Invite& from);

  inline Invite& operator=(const Invite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Invite& default_instance();

  void Swap(Invite* other);

  // implements Message ----------------------------------------------

  Invite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Invite& from);
  void MergeFrom(const Invite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string options = 2;
  inline bool has_options() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 2;
  inline const ::std::string& options() const;
  inline void set_options(const ::std::string& value);
  inline void set_options(const char* value);
  inline void set_options(const char* value, size_t size);
  inline ::std::string* mutable_options();
  inline ::std::string* release_options();
  inline void set_allocated_options(::std::string* options);

  // @@protoc_insertion_point(class_scope:signal_invite.Invite)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_options();
  inline void clear_has_options();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* options_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_signal_5finvite_2eproto();
  friend void protobuf_AssignDesc_signal_5finvite_2eproto();
  friend void protobuf_ShutdownFile_signal_5finvite_2eproto();

  void InitAsDefaultInstance();
  static Invite* default_instance_;
};
// -------------------------------------------------------------------

class InviteCancel : public ::google::protobuf::Message {
 public:
  InviteCancel();
  virtual ~InviteCancel();

  InviteCancel(const InviteCancel& from);

  inline InviteCancel& operator=(const InviteCancel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteCancel& default_instance();

  void Swap(InviteCancel* other);

  // implements Message ----------------------------------------------

  InviteCancel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteCancel& from);
  void MergeFrom(const InviteCancel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:signal_invite.InviteCancel)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_signal_5finvite_2eproto();
  friend void protobuf_AssignDesc_signal_5finvite_2eproto();
  friend void protobuf_ShutdownFile_signal_5finvite_2eproto();

  void InitAsDefaultInstance();
  static InviteCancel* default_instance_;
};
// -------------------------------------------------------------------

class InviteOk : public ::google::protobuf::Message {
 public:
  InviteOk();
  virtual ~InviteOk();

  InviteOk(const InviteOk& from);

  inline InviteOk& operator=(const InviteOk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteOk& default_instance();

  void Swap(InviteOk* other);

  // implements Message ----------------------------------------------

  InviteOk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteOk& from);
  void MergeFrom(const InviteOk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string options = 2;
  inline bool has_options() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 2;
  inline const ::std::string& options() const;
  inline void set_options(const ::std::string& value);
  inline void set_options(const char* value);
  inline void set_options(const char* value, size_t size);
  inline ::std::string* mutable_options();
  inline ::std::string* release_options();
  inline void set_allocated_options(::std::string* options);

  // @@protoc_insertion_point(class_scope:signal_invite.InviteOk)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_options();
  inline void clear_has_options();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* options_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_signal_5finvite_2eproto();
  friend void protobuf_AssignDesc_signal_5finvite_2eproto();
  friend void protobuf_ShutdownFile_signal_5finvite_2eproto();

  void InitAsDefaultInstance();
  static InviteOk* default_instance_;
};
// -------------------------------------------------------------------

class InviteReject : public ::google::protobuf::Message {
 public:
  InviteReject();
  virtual ~InviteReject();

  InviteReject(const InviteReject& from);

  inline InviteReject& operator=(const InviteReject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteReject& default_instance();

  void Swap(InviteReject* other);

  // implements Message ----------------------------------------------

  InviteReject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteReject& from);
  void MergeFrom(const InviteReject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string reson = 2;
  inline bool has_reson() const;
  inline void clear_reson();
  static const int kResonFieldNumber = 2;
  inline const ::std::string& reson() const;
  inline void set_reson(const ::std::string& value);
  inline void set_reson(const char* value);
  inline void set_reson(const char* value, size_t size);
  inline ::std::string* mutable_reson();
  inline ::std::string* release_reson();
  inline void set_allocated_reson(::std::string* reson);

  // @@protoc_insertion_point(class_scope:signal_invite.InviteReject)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_reson();
  inline void clear_has_reson();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* reson_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_signal_5finvite_2eproto();
  friend void protobuf_AssignDesc_signal_5finvite_2eproto();
  friend void protobuf_ShutdownFile_signal_5finvite_2eproto();

  void InitAsDefaultInstance();
  static InviteReject* default_instance_;
};
// -------------------------------------------------------------------

class InviteRinging : public ::google::protobuf::Message {
 public:
  InviteRinging();
  virtual ~InviteRinging();

  InviteRinging(const InviteRinging& from);

  inline InviteRinging& operator=(const InviteRinging& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteRinging& default_instance();

  void Swap(InviteRinging* other);

  // implements Message ----------------------------------------------

  InviteRinging* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteRinging& from);
  void MergeFrom(const InviteRinging& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:signal_invite.InviteRinging)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_signal_5finvite_2eproto();
  friend void protobuf_AssignDesc_signal_5finvite_2eproto();
  friend void protobuf_ShutdownFile_signal_5finvite_2eproto();

  void InitAsDefaultInstance();
  static InviteRinging* default_instance_;
};
// -------------------------------------------------------------------

class InviteTimeOut : public ::google::protobuf::Message {
 public:
  InviteTimeOut();
  virtual ~InviteTimeOut();

  InviteTimeOut(const InviteTimeOut& from);

  inline InviteTimeOut& operator=(const InviteTimeOut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteTimeOut& default_instance();

  void Swap(InviteTimeOut* other);

  // implements Message ----------------------------------------------

  InviteTimeOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteTimeOut& from);
  void MergeFrom(const InviteTimeOut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string reson = 2;
  inline bool has_reson() const;
  inline void clear_reson();
  static const int kResonFieldNumber = 2;
  inline const ::std::string& reson() const;
  inline void set_reson(const ::std::string& value);
  inline void set_reson(const char* value);
  inline void set_reson(const char* value, size_t size);
  inline ::std::string* mutable_reson();
  inline ::std::string* release_reson();
  inline void set_allocated_reson(::std::string* reson);

  // @@protoc_insertion_point(class_scope:signal_invite.InviteTimeOut)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_reson();
  inline void clear_has_reson();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* reson_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_signal_5finvite_2eproto();
  friend void protobuf_AssignDesc_signal_5finvite_2eproto();
  friend void protobuf_ShutdownFile_signal_5finvite_2eproto();

  void InitAsDefaultInstance();
  static InviteTimeOut* default_instance_;
};
// -------------------------------------------------------------------

class InviteBye : public ::google::protobuf::Message {
 public:
  InviteBye();
  virtual ~InviteBye();

  InviteBye(const InviteBye& from);

  inline InviteBye& operator=(const InviteBye& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteBye& default_instance();

  void Swap(InviteBye* other);

  // implements Message ----------------------------------------------

  InviteBye* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteBye& from);
  void MergeFrom(const InviteBye& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string reson = 2;
  inline bool has_reson() const;
  inline void clear_reson();
  static const int kResonFieldNumber = 2;
  inline const ::std::string& reson() const;
  inline void set_reson(const ::std::string& value);
  inline void set_reson(const char* value);
  inline void set_reson(const char* value, size_t size);
  inline ::std::string* mutable_reson();
  inline ::std::string* release_reson();
  inline void set_allocated_reson(::std::string* reson);

  // @@protoc_insertion_point(class_scope:signal_invite.InviteBye)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_reson();
  inline void clear_has_reson();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* reson_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_signal_5finvite_2eproto();
  friend void protobuf_AssignDesc_signal_5finvite_2eproto();
  friend void protobuf_ShutdownFile_signal_5finvite_2eproto();

  void InitAsDefaultInstance();
  static InviteBye* default_instance_;
};
// ===================================================================


// ===================================================================

// Invite

// required int32 id = 1;
inline bool Invite::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Invite::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Invite::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Invite::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Invite::id() const {
  // @@protoc_insertion_point(field_get:signal_invite.Invite.id)
  return id_;
}
inline void Invite::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:signal_invite.Invite.id)
}

// optional string options = 2;
inline bool Invite::has_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Invite::set_has_options() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Invite::clear_has_options() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Invite::clear_options() {
  if (options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_->clear();
  }
  clear_has_options();
}
inline const ::std::string& Invite::options() const {
  // @@protoc_insertion_point(field_get:signal_invite.Invite.options)
  return *options_;
}
inline void Invite::set_options(const ::std::string& value) {
  set_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_ = new ::std::string;
  }
  options_->assign(value);
  // @@protoc_insertion_point(field_set:signal_invite.Invite.options)
}
inline void Invite::set_options(const char* value) {
  set_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_ = new ::std::string;
  }
  options_->assign(value);
  // @@protoc_insertion_point(field_set_char:signal_invite.Invite.options)
}
inline void Invite::set_options(const char* value, size_t size) {
  set_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_ = new ::std::string;
  }
  options_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:signal_invite.Invite.options)
}
inline ::std::string* Invite::mutable_options() {
  set_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:signal_invite.Invite.options)
  return options_;
}
inline ::std::string* Invite::release_options() {
  clear_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = options_;
    options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Invite::set_allocated_options(::std::string* options) {
  if (options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete options_;
  }
  if (options) {
    set_has_options();
    options_ = options;
  } else {
    clear_has_options();
    options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:signal_invite.Invite.options)
}

// -------------------------------------------------------------------

// InviteCancel

// required int32 id = 1;
inline bool InviteCancel::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteCancel::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteCancel::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteCancel::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 InviteCancel::id() const {
  // @@protoc_insertion_point(field_get:signal_invite.InviteCancel.id)
  return id_;
}
inline void InviteCancel::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:signal_invite.InviteCancel.id)
}

// -------------------------------------------------------------------

// InviteOk

// required int32 id = 1;
inline bool InviteOk::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteOk::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteOk::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteOk::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 InviteOk::id() const {
  // @@protoc_insertion_point(field_get:signal_invite.InviteOk.id)
  return id_;
}
inline void InviteOk::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:signal_invite.InviteOk.id)
}

// optional string options = 2;
inline bool InviteOk::has_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteOk::set_has_options() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteOk::clear_has_options() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteOk::clear_options() {
  if (options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_->clear();
  }
  clear_has_options();
}
inline const ::std::string& InviteOk::options() const {
  // @@protoc_insertion_point(field_get:signal_invite.InviteOk.options)
  return *options_;
}
inline void InviteOk::set_options(const ::std::string& value) {
  set_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_ = new ::std::string;
  }
  options_->assign(value);
  // @@protoc_insertion_point(field_set:signal_invite.InviteOk.options)
}
inline void InviteOk::set_options(const char* value) {
  set_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_ = new ::std::string;
  }
  options_->assign(value);
  // @@protoc_insertion_point(field_set_char:signal_invite.InviteOk.options)
}
inline void InviteOk::set_options(const char* value, size_t size) {
  set_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_ = new ::std::string;
  }
  options_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:signal_invite.InviteOk.options)
}
inline ::std::string* InviteOk::mutable_options() {
  set_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:signal_invite.InviteOk.options)
  return options_;
}
inline ::std::string* InviteOk::release_options() {
  clear_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = options_;
    options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteOk::set_allocated_options(::std::string* options) {
  if (options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete options_;
  }
  if (options) {
    set_has_options();
    options_ = options;
  } else {
    clear_has_options();
    options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:signal_invite.InviteOk.options)
}

// -------------------------------------------------------------------

// InviteReject

// required int32 id = 1;
inline bool InviteReject::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteReject::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteReject::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteReject::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 InviteReject::id() const {
  // @@protoc_insertion_point(field_get:signal_invite.InviteReject.id)
  return id_;
}
inline void InviteReject::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:signal_invite.InviteReject.id)
}

// optional string reson = 2;
inline bool InviteReject::has_reson() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteReject::set_has_reson() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteReject::clear_has_reson() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteReject::clear_reson() {
  if (reson_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_->clear();
  }
  clear_has_reson();
}
inline const ::std::string& InviteReject::reson() const {
  // @@protoc_insertion_point(field_get:signal_invite.InviteReject.reson)
  return *reson_;
}
inline void InviteReject::set_reson(const ::std::string& value) {
  set_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_ = new ::std::string;
  }
  reson_->assign(value);
  // @@protoc_insertion_point(field_set:signal_invite.InviteReject.reson)
}
inline void InviteReject::set_reson(const char* value) {
  set_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_ = new ::std::string;
  }
  reson_->assign(value);
  // @@protoc_insertion_point(field_set_char:signal_invite.InviteReject.reson)
}
inline void InviteReject::set_reson(const char* value, size_t size) {
  set_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_ = new ::std::string;
  }
  reson_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:signal_invite.InviteReject.reson)
}
inline ::std::string* InviteReject::mutable_reson() {
  set_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:signal_invite.InviteReject.reson)
  return reson_;
}
inline ::std::string* InviteReject::release_reson() {
  clear_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reson_;
    reson_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteReject::set_allocated_reson(::std::string* reson) {
  if (reson_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reson_;
  }
  if (reson) {
    set_has_reson();
    reson_ = reson;
  } else {
    clear_has_reson();
    reson_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:signal_invite.InviteReject.reson)
}

// -------------------------------------------------------------------

// InviteRinging

// required int32 id = 1;
inline bool InviteRinging::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteRinging::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteRinging::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteRinging::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 InviteRinging::id() const {
  // @@protoc_insertion_point(field_get:signal_invite.InviteRinging.id)
  return id_;
}
inline void InviteRinging::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:signal_invite.InviteRinging.id)
}

// -------------------------------------------------------------------

// InviteTimeOut

// required int32 id = 1;
inline bool InviteTimeOut::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteTimeOut::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteTimeOut::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteTimeOut::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 InviteTimeOut::id() const {
  // @@protoc_insertion_point(field_get:signal_invite.InviteTimeOut.id)
  return id_;
}
inline void InviteTimeOut::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:signal_invite.InviteTimeOut.id)
}

// optional string reson = 2;
inline bool InviteTimeOut::has_reson() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteTimeOut::set_has_reson() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteTimeOut::clear_has_reson() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteTimeOut::clear_reson() {
  if (reson_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_->clear();
  }
  clear_has_reson();
}
inline const ::std::string& InviteTimeOut::reson() const {
  // @@protoc_insertion_point(field_get:signal_invite.InviteTimeOut.reson)
  return *reson_;
}
inline void InviteTimeOut::set_reson(const ::std::string& value) {
  set_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_ = new ::std::string;
  }
  reson_->assign(value);
  // @@protoc_insertion_point(field_set:signal_invite.InviteTimeOut.reson)
}
inline void InviteTimeOut::set_reson(const char* value) {
  set_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_ = new ::std::string;
  }
  reson_->assign(value);
  // @@protoc_insertion_point(field_set_char:signal_invite.InviteTimeOut.reson)
}
inline void InviteTimeOut::set_reson(const char* value, size_t size) {
  set_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_ = new ::std::string;
  }
  reson_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:signal_invite.InviteTimeOut.reson)
}
inline ::std::string* InviteTimeOut::mutable_reson() {
  set_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:signal_invite.InviteTimeOut.reson)
  return reson_;
}
inline ::std::string* InviteTimeOut::release_reson() {
  clear_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reson_;
    reson_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteTimeOut::set_allocated_reson(::std::string* reson) {
  if (reson_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reson_;
  }
  if (reson) {
    set_has_reson();
    reson_ = reson;
  } else {
    clear_has_reson();
    reson_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:signal_invite.InviteTimeOut.reson)
}

// -------------------------------------------------------------------

// InviteBye

// required int32 id = 1;
inline bool InviteBye::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteBye::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteBye::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteBye::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 InviteBye::id() const {
  // @@protoc_insertion_point(field_get:signal_invite.InviteBye.id)
  return id_;
}
inline void InviteBye::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:signal_invite.InviteBye.id)
}

// optional string reson = 2;
inline bool InviteBye::has_reson() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteBye::set_has_reson() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteBye::clear_has_reson() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteBye::clear_reson() {
  if (reson_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_->clear();
  }
  clear_has_reson();
}
inline const ::std::string& InviteBye::reson() const {
  // @@protoc_insertion_point(field_get:signal_invite.InviteBye.reson)
  return *reson_;
}
inline void InviteBye::set_reson(const ::std::string& value) {
  set_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_ = new ::std::string;
  }
  reson_->assign(value);
  // @@protoc_insertion_point(field_set:signal_invite.InviteBye.reson)
}
inline void InviteBye::set_reson(const char* value) {
  set_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_ = new ::std::string;
  }
  reson_->assign(value);
  // @@protoc_insertion_point(field_set_char:signal_invite.InviteBye.reson)
}
inline void InviteBye::set_reson(const char* value, size_t size) {
  set_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_ = new ::std::string;
  }
  reson_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:signal_invite.InviteBye.reson)
}
inline ::std::string* InviteBye::mutable_reson() {
  set_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reson_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:signal_invite.InviteBye.reson)
  return reson_;
}
inline ::std::string* InviteBye::release_reson() {
  clear_has_reson();
  if (reson_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reson_;
    reson_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteBye::set_allocated_reson(::std::string* reson) {
  if (reson_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reson_;
  }
  if (reson) {
    set_has_reson();
    reson_ = reson;
  } else {
    clear_has_reson();
    reson_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:signal_invite.InviteBye.reson)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace signal_invite

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_signal_5finvite_2eproto__INCLUDED
